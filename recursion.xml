<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C++" filename="recursion.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;iostream&gt;</cpp:file></cpp:include> 
<using>using <namespace>namespace <name>std</name>;</namespace></using>

<function><type><name>int</name></type> <name>fact</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list> 
<block>{<block_content>  
    <if_stmt><if>if<condition>(<expr><name>n</name><operator>==</operator><literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if>
    <else>else<block type="pseudo"><block_content>
    <return>return <expr><call><name>fact</name><argument_list>(<argument><expr><name>n</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>*</operator> <name>n</name></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function> 

<function><type><name>void</name></type> <name>print_fun</name><parameter_list>(<parameter><decl><type><name>char</name></type> <name>ch</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>,<decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>
    <if_stmt><if>if<condition>(<expr><name>i</name><operator>==</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
  <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>ch</name><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt></block_content></block></if>
  <if type="elseif">else
  if<condition>(<expr><literal type="boolean">true</literal></expr>)</condition>
  <block>{<block_content>
      <for>for<control>(<init><expr><name>j</name><operator>=</operator><literal type="number">1</literal></expr>;</init>  <condition><expr><name>j</name><operator>&lt;=</operator><literal type="number">5</literal><operator>+</operator><literal type="number">3</literal></expr>;</condition><incr><expr><name>j</name><operator>+=</operator><literal type="number">1</literal></expr></incr>)</control><block type="pseudo"><block_content>
      <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><call><name>fact</name><argument_list>(<argument><expr><name>j</name></expr></argument>)</argument_list></call><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt></block_content></block></for>
  </block_content>}</block></if>
  
  <else>else<block type="pseudo"><block_content>
  <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"Hi"</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> 
<block>{<block_content>
    <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><call><name>fact</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt> 
    <expr_stmt><expr><call><name>print_fun</name><argument_list>(<argument><expr><literal type="char">'a'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

</unit>
